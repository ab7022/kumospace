generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MODERATOR
  MEMBER
  GUEST
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  AVAILABLE
  AWAY
  DND
  OFFLINE
  BUSY
}

model User {
  id                  Int           @id @default(autoincrement())
  name                String
  email               String        @unique
  secondaryEmail      String?
  phoneNumber         String?
  password            String?
  profileUrl          String?
  username            String?       @unique
  timezone            String?
  workHoursFrom       String?
  workHoursTo         String?
  premiumUser         Boolean       @default(false)
  validTill           DateTime?
  admin               Boolean       @default(false)
  createdAt           DateTime      @default(now())
  trialEndsAt         DateTime?     @default(dbgenerated("CURRENT_TIMESTAMP + INTERVAL '14 days'"))
  provider            String
  hasSubmittedDetails Boolean       @default(false)
  isVerified          Boolean       @default(false)
  firstName           String?
  lastName            String?
  role                UserRole      @default(MEMBER)
  status              Status        @default(AVAILABLE)
  onCurrentlyWorking  String?
  tasks               Task[]
  spaces              Space[]
  spaceMembers        SpaceMember[]
  reminders           Reminder[]
  deadlines           Deadline[]
  teams               Team[]
  teamMembers         TeamMember[]

  @@unique([email], map: "unique_user_email")
  @@index([email], name: "email_idx")
}

model Reminder {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  time        DateTime
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Task {
  id        Int          @id @default(autoincrement())
  name      String
  priority  TaskPriority @default(MEDIUM)
  completed Boolean      @default(false)
  userId    Int
  dueDate   DateTime?
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime     @default(now())
}

model Space {
  id          Int              @id @default(autoincrement())
  name        String
  url         String
  teamSize    Int
  code        String           @unique
  primaryGoal String
  userId      Int
  members     SpaceMember[]
  invitations TeamInvitation[]
  teams       Team[]
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime         @default(now())

  @@unique([code, userId])
}

model Team {
  id        Int          @id @default(autoincrement())
  name      String
  createdBy Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  members   TeamMember[]
  user      User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  spaceId   Int
  space     Space        @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Deadline {
  id          Int      @id @default(autoincrement())
  date        DateTime
  title       String
  description String
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model SpaceMember {
  id       Int       @id @default(autoincrement())
  email    String
  role     UserRole  @default(MEMBER)
  joinedAt DateTime?
  userId   Int
  spaceId  Int
  space    Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, spaceId])
}

model TeamMember {
  id        Int       @id @default(autoincrement())
  email     String
  userId    Int
  spaceId   Int
  role      UserRole  @default(MEMBER)
  invitedAt DateTime  @default(now())
  joinedAt  DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team      @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([spaceId, userId])
}

model TeamInvitation {
  id        Int       @id @default(autoincrement())
  spaceId   Int
  role      UserRole  @default(MEMBER)
  accepted  Boolean   @default(false)
  invitedAt DateTime  @default(now())
  joinedAt  DateTime?
  email     String
  space     Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([spaceId, email])
}
